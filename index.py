import openai #necesario para conectar con openai
import typer
import webbrowser # Necesario para abrir el navegador web
from rich.table import Table
from rich.console import Console
from rich.prompt import Prompt
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Configuraci√≥n de la consola
console = Console()

# Configuraci√≥n de la API de OpenAI
openai.api_key = "XXXXXXXXXXXXXXXXXXXX" # La API Key se genera en https://openai.com/api
model_engine = "text-davinci-002" # El motor que vamos a utilizar

# Funci√≥n para guardar la conversaci√≥n en el archivo conversacion.txt, machacando el contenido anterior
def export_conversation(messages):
    with open("conversacion.txt", "w") as file:
        for message in messages:
            file.write(f"{message['role']}: {message['content']}\n")

# Funci√≥n para mostrar el historial de mensajes
def show_history(messages):
    console.print("üìú Historial de mensajes:\n")
    for message in messages:
        if message["role"] == "user":
            console.print(f"{message['content']}\n")

# Funci√≥n para enviar correos electr√≥nicos
def send_email(to_address, subject, body):
    from_address = 'XXXXXX@gmail.com' # reemplazar con tu direcci√≥n de correo electr√≥nico
    password = 'XXXXXXX' # reemplazar con tu contrase√±a
    smtp_server = 'smtp.gmail.com' # reemplazar con tu servidor SMTP saliente
    smtp_port = 587 # reemplazar con el puerto SMTP saliente que utiliza tu proveedor de correo electr√≥nico

    # Crear el objeto MIME
    message = MIMEMultipart()
    message['From'] = from_address
    message['To'] = to_address
    message['Subject'] = subject

    # Agregar el cuerpo del correo electr√≥nico
    message.attach(MIMEText(body, 'plain'))

    # Establecer la conexi√≥n con el servidor SMTP
    smtp_server = smtplib.SMTP(smtp_server, smtp_port)
    smtp_server.ehlo()
    smtp_server.starttls()
    smtp_server.ehlo()
    smtp_server.login(from_address, password)

    # Enviar el correo electr√≥nico
    smtp_server.sendmail(from_address, to_address, message.as_string())

    # Cerrar la conexi√≥n
    smtp_server.quit()

    console.print(f"üìß El correo electr√≥nico ha sido enviado a {to_address} üìß\n")

# Funci√≥n para generar el prompt que se enviar√° a OpenAI
def generate_prompt(messages):
    prompt = ""
    for message in messages:
        if message["role"] == "system":
            prompt += message["content"] + "\n"
        elif message["role"] == "user":
            prompt += f"Usuario: {message['content']}\n"
        else:
            prompt += f"{message['content']}\n"
    return prompt

# Funci√≥n principal
def main():

    # Se imprime el t√≠tulo y se muestra una tabla con los comandos disponibles
    console.print("üí¨ [bold red]Una aplicaci√≥n ChatGPT creada con Python[/bold red] üí¨\n")
    table = Table(title="Comandos disponibles", show_header=True, header_style="bold green")
    table.add_column("Comando")
    table.add_column("Descripci√≥n")
    table.add_row("üÜï [bold]new[/bold]", "Crear una nueva conversaci√≥n")
    table.add_row("üóëÔ∏è [bold]clear[/bold]", "Eliminar los mensajes de la conversaci√≥n de la pantalla")
    table.add_row("‚úÖ [bold]export[/bold]", "Exportar la conversaci√≥n actual a un archivo de texto")
    table.add_row("üìß [bold]send_email[/bold]", "Enviar un correo electr√≥nico")
    table.add_row("üîé [bold]search[/bold]", "Buscar directamente en google")
    table.add_row("üìú [bold]history[/bold]", "Mostrar el historial de mensajes")
    table.add_row("ü§ñ [bold]help[/bold]", "Muestra esta tabla de comandos en cualquier momento de la conversaci√≥n")
    table.add_row("üëã [bold]exit[/bold]", "Salir de la aplicaci√≥n")
    console.print(table)

    # Se inicia la conversaci√≥n con un mensaje del sistema
    context = {"role": "system","content": "Esto es una aplicaci√≥n creada con Python."}
    messages = [context]

    # Ciclo principal que se ejecuta mientras el usuario no escriba "exit"
    while True:
        content = typer.prompt("\nEscribe tu pregunta")

        # Se a√±ade el mensaje del usuario a la lista de mensajes
        messages.append({"role": "user", "content": content})

        # Se env√≠a la solicitud a OpenAI
        response = openai.Completion.create(
            engine=model_engine,
            prompt=generate_prompt(messages),
            max_tokens=2048,
            temperature=1.1,
            n=1,
            stop=None,
            presence_penalty=0.5,
            frequency_penalty=0.5,
        )

        # Comandos ....

        # Si el usuario escribe "new", se crea una nueva conversaci√≥n
        if content.lower() == "new":
            console.print("üÜï Se ha creado una nueva conversaci√≥n üÜï\n")
            messages = [context]
            continue

        # Si el usuario escribe "exit", se le pregunta si est√° seguro de que quiere salir
        elif content.lower() == "exit":
            if typer.confirm("¬øEst√°s seguro de que quieres salir?"):
                console.print("üëã ¬°Hasta pronto! üëã")
                raise typer.Abort()

        # Si el usuario escribe "export", se exporta la conversaci√≥n actual a un archivo de texto
        elif content.lower() == "export":
            export_conversation(messages)
            console.print("‚úÖ Conversaci√≥n exportada correctamente ‚úÖ\n")
            continue  # saltar la llamada a la API de OpenAI y la respuesta

        # Si el usuario escribe "search", se le pide qu√© t√©rmino quiere buscar y se abre una pesta√±a en el navegador con los resultados
        elif content.lower() == "search":
            term = typer.prompt("¬øQu√© quieres buscar en google?")
            url = f"https://www.google.com/search?q={term}"
            webbrowser.open_new_tab(url)
            console.print(f"üîé Buscando '{term}' en el navegador web üîé\n")

        # Si el usuario escribe "clear", se eliminan todos los mensajes excepto el mensaje inicial del sistema
        elif content.lower() == "clear":
            console.clear()
            console.print("üóëÔ∏è Conversaci√≥n actual eliminada üóëÔ∏è\n")
            continue

        # Si el usuario escribe "send_mail", se llama a la funci√≥n send_email con los par√°metros necesarios
        if content.lower() == "send_mail":
            to_address = Prompt.ask("Escribe la direcci√≥n de correo electr√≥nico del destinatario")
            subject = Prompt.ask("Escribe el asunto del correo electr√≥nico")
            body = Prompt.ask("Escribe el cuerpo del correo electr√≥nico")
            send_email(to_address, subject, body)
            continue


        # Agregar un bloque de c√≥digo en el bucle principal que maneje el comando "history"
        elif content.lower() == "history":
            show_history(messages)
            continue

        # Si el usuario escribe "help", se imprime una lista con los comandos disponibles
        elif content.lower() == "help":
            console.print(table)
            continue  # saltar la llamada a la API de OpenAI y la respuesta

        # Se obtiene la respuesta de OpenAI y se a√±ade a la lista de mensajes
        response_content = response.choices[0].text
        messages.append({"role": "assistant", "content": response_content})

        # Se muestra la respuesta al usuario
        styled_text = f"\n[bold red]-> Respuesta: [/bold red][green]{response_content.replace('Asistente:', '')}[/green]\n"
        console.print(styled_text)

# Se ejecuta la funci√≥n principal si se llama a este script directamente
if __name__ == "__main__":
    typer.run(main)
